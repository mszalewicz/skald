// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createSetting = `-- name: CreateSetting :one
INSERT INTO settings (
  width, height, fontsize
) VALUES (
  ?, ?, ?
)
RETURNING id, width, height, fontsize
`

type CreateSettingParams struct {
	Width    int64
	Height   int64
	Fontsize int64
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSetting, arg.Width, arg.Height, arg.Fontsize)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Width,
		&i.Height,
		&i.Fontsize,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM settings
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getSettings = `-- name: GetSettings :many
SELECT id, width, height, fontsize FROM settings
`

func (q *Queries) GetSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, getSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.Width,
			&i.Height,
			&i.Fontsize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettingsID = `-- name: GetSettingsID :one
SELECT id FROM settings
WHERE width = ?
`

func (q *Queries) GetSettingsID(ctx context.Context, width int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSettingsID, width)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listSettings = `-- name: ListSettings :many
SELECT id, width, height, fontsize FROM settings
ORDER BY width
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.Width,
			&i.Height,
			&i.Fontsize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings
set width = ?,
height = ?,
fontsize = ?
WHERE id = ?
`

type UpdateSettingParams struct {
	Width    int64
	Height   int64
	Fontsize int64
	ID       int64
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting,
		arg.Width,
		arg.Height,
		arg.Fontsize,
		arg.ID,
	)
	return err
}
