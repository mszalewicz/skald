// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const countAccounts = `-- name: CountAccounts :one
SELECT count(*) FROM account
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSetting = `-- name: CountSetting :one
SELECT count(*) FROM settings
WHERE width = ?
`

func (q *Queries) CountSetting(ctx context.Context, width int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSetting, width)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one

INSERT INTO account (
  uuid, name
) VALUES (
  ?, ?
)
RETURNING uuid, name
`

type CreateAccountParams struct {
	Uuid string
	Name string
}

// ---------------------------------------------------------------
// - Account -----------------------------------------------------
// ---------------------------------------------------------------
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Uuid, arg.Name)
	var i Account
	err := row.Scan(&i.Uuid, &i.Name)
	return i, err
}

const createSetting = `-- name: CreateSetting :one
INSERT INTO settings (
  width, height, fontsize
) VALUES (
  ?, ?, ?
)
RETURNING id, width, height, fontsize
`

type CreateSettingParams struct {
	Width    int64
	Height   int64
	Fontsize int64
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSetting, arg.Width, arg.Height, arg.Fontsize)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Width,
		&i.Height,
		&i.Fontsize,
	)
	return i, err
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE id = ?
`

func (q *Queries) DeleteSetting(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSetting, id)
	return err
}

const getFontSizeByWidth = `-- name: GetFontSizeByWidth :one
SELECT fontsize FROM settings
WHERE width = ?
`

func (q *Queries) GetFontSizeByWidth(ctx context.Context, width int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFontSizeByWidth, width)
	var fontsize int64
	err := row.Scan(&fontsize)
	return fontsize, err
}

const getSettings = `-- name: GetSettings :many

SELECT id, width, height, fontsize FROM settings
`

// ---------------------------------------------------------------
// - Settings ----------------------------------------------------
// ---------------------------------------------------------------
func (q *Queries) GetSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, getSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.Width,
			&i.Height,
			&i.Fontsize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettingsID = `-- name: GetSettingsID :one
SELECT id FROM settings
WHERE width = ?
`

func (q *Queries) GetSettingsID(ctx context.Context, width int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSettingsID, width)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listSettings = `-- name: ListSettings :many
SELECT id, width, height, fontsize FROM settings
ORDER BY width
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.Width,
			&i.Height,
			&i.Fontsize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE account
SET name = ?
WHERE uuid = ?
`

type UpdateAccountParams struct {
	Name string
	Uuid string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount, arg.Name, arg.Uuid)
	return err
}

const updateSettingFont = `-- name: UpdateSettingFont :exec
UPDATE settings
SET fontsize = ?
WHERE width = ?
`

type UpdateSettingFontParams struct {
	Fontsize int64
	Width    int64
}

func (q *Queries) UpdateSettingFont(ctx context.Context, arg UpdateSettingFontParams) error {
	_, err := q.db.ExecContext(ctx, updateSettingFont, arg.Fontsize, arg.Width)
	return err
}
